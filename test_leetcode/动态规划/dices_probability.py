# 把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。
# 你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。
# 示例 1:
#
# 输入: 1
# 输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]
# 示例2:
#
# 输入: 2
# 输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]
# 1+1,
# 1+2,2+1,
# 2+2,1+3,3+1
# 2+3,3+2,1+4,4+1
# 3+3,2+4,4+2,1+5,5+1
# 3+4,4+3,1+6,6+1,2+5,5+2
# 3+5,5+3,2+6,6+2,4+4


class Solution:
    def dicesProbability(self, n: int):
        dp = [1/6.0]*6
        for i in range(2, n+1):
            tmp = [0]*(5*n+1)
            for j in range(len(dp)):
                for k in range(6):
                    tmp[j+k] += dp[k]*(1/6.0)
            dp = tmp
        return dp


if __name__ == '__main__':
    solution = Solution()
    print(solution.dicesProbability(2))

